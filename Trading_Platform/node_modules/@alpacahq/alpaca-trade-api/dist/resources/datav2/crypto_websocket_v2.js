"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlpacaCryptoClient = void 0;
var entityv2_1 = require("./entityv2");
var websocket_1 = require("./websocket");
var AlpacaCryptoClient = /** @class */ (function (_super) {
    __extends(AlpacaCryptoClient, _super);
    function AlpacaCryptoClient(options) {
        var _this = this;
        var url = options.url.replace("https", "wss") + "/v1beta1/crypto";
        var exchanges = Array.isArray(options.exchanges)
            ? options.exchanges.join(",")
            : options.exchanges;
        options.url = url + "?exchanges=" + exchanges;
        options.subscriptions = {
            trades: [],
            quotes: [],
            bars: [],
            dailyBars: [],
        };
        _this = _super.call(this, options) || this;
        return _this;
    }
    AlpacaCryptoClient.prototype.subscribeForTrades = function (trades) {
        var _a;
        (_a = this.session.subscriptions.trades).push.apply(_a, trades);
        this.subscribe({ trades: trades });
    };
    AlpacaCryptoClient.prototype.subscribeForQuotes = function (quotes) {
        var _a;
        (_a = this.session.subscriptions.quotes).push.apply(_a, quotes);
        this.subscribe({ quotes: quotes });
    };
    AlpacaCryptoClient.prototype.subscribeForBars = function (bars) {
        var _a;
        (_a = this.session.subscriptions.bars).push.apply(_a, bars);
        this.subscribe({ bars: bars });
    };
    AlpacaCryptoClient.prototype.subscribeForDailyBars = function (dailyBars) {
        var _a;
        (_a = this.session.subscriptions.dailyBars).push.apply(_a, dailyBars);
        this.subscribe({ dailyBars: dailyBars });
    };
    AlpacaCryptoClient.prototype.subscribe = function (symbols) {
        var _a, _b, _c, _d;
        var subMsg = {
            action: "subscribe",
            trades: (_a = symbols.trades) !== null && _a !== void 0 ? _a : [],
            quotes: (_b = symbols.quotes) !== null && _b !== void 0 ? _b : [],
            bars: (_c = symbols.bars) !== null && _c !== void 0 ? _c : [],
            dailyBars: (_d = symbols.dailyBars) !== null && _d !== void 0 ? _d : [],
        };
        this.conn.send(this.msgpack.encode(subMsg));
    };
    AlpacaCryptoClient.prototype.subscribeAll = function () {
        var _a = this.session.subscriptions, trades = _a.trades, quotes = _a.quotes, bars = _a.bars, dailyBars = _a.dailyBars;
        if (trades.length > 0 ||
            quotes.length > 0 ||
            bars.length > 0 ||
            dailyBars.length > 0) {
            var msg = {
                action: "subscribe",
                trades: trades,
                quotes: quotes,
                bars: bars,
                dailyBars: dailyBars,
            };
            this.conn.send(this.msgpack.encode(msg));
        }
    };
    AlpacaCryptoClient.prototype.unsubscribeFromTrades = function (trades) {
        this.session.subscriptions.trades =
            this.session.subscriptions.trades.filter(function (trade) { return !trades.includes(trade); });
        this.unsubscribe({ trades: trades });
    };
    AlpacaCryptoClient.prototype.unsubscribeFromQuotes = function (quotes) {
        this.session.subscriptions.quotes =
            this.session.subscriptions.quotes.filter(function (quote) { return !quotes.includes(quote); });
        this.unsubscribe({ quotes: quotes });
    };
    AlpacaCryptoClient.prototype.unsubscribeFromBars = function (bars) {
        this.session.subscriptions.bars = this.session.subscriptions.bars.filter(function (bar) { return !bars.includes(bar); });
        this.unsubscribe({ bars: bars });
    };
    AlpacaCryptoClient.prototype.unsubscriceFromDailyBars = function (dailyBars) {
        this.session.subscriptions.dailyBars =
            this.session.subscriptions.dailyBars.filter(function (dailyBar) { return !dailyBars.includes(dailyBar); });
        this.unsubscribe({ dailyBars: dailyBars });
    };
    AlpacaCryptoClient.prototype.unsubscribe = function (symbols) {
        var _a, _b, _c, _d;
        var unsubMsg = {
            action: "unsubscribe",
            trades: (_a = symbols.trades) !== null && _a !== void 0 ? _a : [],
            quotes: (_b = symbols.quotes) !== null && _b !== void 0 ? _b : [],
            bars: (_c = symbols.bars) !== null && _c !== void 0 ? _c : [],
            dailyBars: (_d = symbols.dailyBars) !== null && _d !== void 0 ? _d : [],
        };
        this.conn.send(this.msgpack.encode(unsubMsg));
    };
    AlpacaCryptoClient.prototype.updateSubscriptions = function (msg) {
        this.session.subscriptions = {
            trades: msg.trades,
            quotes: msg.quotes,
            bars: msg.bars,
            dailyBars: msg.dailyBars,
        };
        this.log("listening to streams:\n        " + JSON.stringify(this.session.subscriptions));
    };
    AlpacaCryptoClient.prototype.onCryptoTrade = function (fn) {
        this.on(websocket_1.EVENT.TRADES, function (trade) { return fn(trade); });
    };
    AlpacaCryptoClient.prototype.onCryptoQuote = function (fn) {
        this.on(websocket_1.EVENT.QUOTES, function (quote) { return fn(quote); });
    };
    AlpacaCryptoClient.prototype.onCryptoBar = function (fn) {
        this.on(websocket_1.EVENT.BARS, function (bar) { return fn(bar); });
    };
    AlpacaCryptoClient.prototype.onCryptoDailyBar = function (fn) {
        this.on(websocket_1.EVENT.DAILY_BARS, function (dailyBar) { return fn(dailyBar); });
    };
    AlpacaCryptoClient.prototype.dataHandler = function (data) {
        var _this = this;
        data.forEach(function (element) {
            if ("T" in element) {
                switch (element.T) {
                    case "t":
                        _this.emit(websocket_1.EVENT.TRADES, (0, entityv2_1.AlpacaCryptoTrade)(element));
                        break;
                    case "q":
                        _this.emit(websocket_1.EVENT.QUOTES, (0, entityv2_1.AlpacaCryptoQuote)(element));
                        break;
                    case "b":
                        _this.emit(websocket_1.EVENT.BARS, (0, entityv2_1.AlpacaCryptoBar)(element));
                        break;
                    case "d":
                        _this.emit(websocket_1.EVENT.DAILY_BARS, (0, entityv2_1.AlpacaCryptoBar)(element));
                        break;
                    default:
                        _this.emit(websocket_1.EVENT.CLIENT_ERROR, websocket_1.ERROR.UNEXPECTED_MESSAGE);
                }
            }
        });
    };
    return AlpacaCryptoClient;
}(websocket_1.AlpacaWebsocket));
exports.AlpacaCryptoClient = AlpacaCryptoClient;
