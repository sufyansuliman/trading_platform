"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlpacaCryptoXBBO = exports.AlpacaCryptoBar = exports.AlpacaCryptoQuote = exports.AlpacaCryptoTrade = exports.AlpacaLuldV2 = exports.AlpacaStatusV2 = exports.AlpacaSnaphotV2 = exports.AlpacaBarV2 = exports.AlpacaQuoteV2 = exports.AlpacaTradeV2 = void 0;
var mapKeys_1 = __importDefault(require("lodash/mapKeys"));
var mapValues_1 = __importDefault(require("lodash/mapValues"));
var trade_mapping_v2 = {
    S: "Symbol",
    i: "ID",
    x: "Exchange",
    p: "Price",
    s: "Size",
    t: "Timestamp",
    c: "Conditions",
    z: "Tape",
};
var quote_mapping_v2 = {
    S: "Symbol",
    bx: "BidExchange",
    bp: "BidPrice",
    bs: "BidSize",
    ax: "AskExchange",
    ap: "AskPrice",
    as: "AskSize",
    t: "Timestamp",
    c: "Conditions",
    z: "Tape",
};
var bar_mapping_v2 = {
    S: "Symbol",
    o: "OpenPrice",
    h: "HighPrice",
    l: "LowPrice",
    c: "ClosePrice",
    v: "Volume",
    t: "Timestamp",
    vw: "VWAP",
    n: "TradeCount",
};
var snapshot_mapping_v2 = {
    latestTrade: "LatestTrade",
    latestQuote: "LatestQuote",
    minuteBar: "MinuteBar",
    dailyBar: "DailyBar",
    prevDailyBar: "PrevDailyBar",
};
var status_mapping_v2 = {
    S: "Symbol",
    sc: "StatusCode",
    sm: "StatusMessage",
    rc: "ReasonCode",
    rm: "ReasonMessage",
    t: "Timestamp",
    z: "Tape",
};
var luld_mapping_v2 = {
    S: "Symbol",
    u: "LimitUpPrice",
    d: "LimitDownPrice",
    i: "Indicator",
    t: "Timestamp",
    z: "Tape",
};
var crypto_trade_mapping = {
    S: "Symbol",
    t: "Timestamp",
    x: "Exchanhge",
    p: "Price",
    s: "Size",
    tks: "TakerSide",
    i: "Id",
};
var crypto_quote_mapping = {
    S: "Symbol",
    t: "Timestamp",
    x: "Exchange",
    bp: "BidPrice",
    bs: "BidSize",
    ap: "AskPrice",
    as: "AskSize",
};
var crypro_bar_mapping = {
    S: "Symbol",
    t: "Timestamp",
    o: "Open",
    h: "High",
    l: "Low",
    c: "Close",
    v: "Volume",
    vw: "VWAP",
    n: "TradeCount",
};
var crypto_xbbo_mapping = {
    S: "Symbol",
    t: "Timestamp",
    ap: "AskPrice",
    as: "AskSize",
    ax: "AskExchange",
    bp: "BidPrice",
    bs: "BidSize",
    bx: "BidExchange",
};
function AlpacaTradeV2(data) {
    return aliasObjectKey(data, trade_mapping_v2);
}
exports.AlpacaTradeV2 = AlpacaTradeV2;
function AlpacaQuoteV2(data) {
    return aliasObjectKey(data, quote_mapping_v2);
}
exports.AlpacaQuoteV2 = AlpacaQuoteV2;
function AlpacaBarV2(data) {
    return aliasObjectKey(data, bar_mapping_v2);
}
exports.AlpacaBarV2 = AlpacaBarV2;
function AlpacaSnaphotV2(data) {
    var snapshot = aliasObjectKey(data, snapshot_mapping_v2);
    return (0, mapValues_1.default)(snapshot, function (value, key) {
        return convertSnapshotData(key, value);
    });
}
exports.AlpacaSnaphotV2 = AlpacaSnaphotV2;
function AlpacaStatusV2(data) {
    return aliasObjectKey(data, status_mapping_v2);
}
exports.AlpacaStatusV2 = AlpacaStatusV2;
function AlpacaLuldV2(data) {
    return aliasObjectKey(data, luld_mapping_v2);
}
exports.AlpacaLuldV2 = AlpacaLuldV2;
function AlpacaCryptoTrade(data) {
    return aliasObjectKey(data, crypto_trade_mapping);
}
exports.AlpacaCryptoTrade = AlpacaCryptoTrade;
function AlpacaCryptoQuote(data) {
    return aliasObjectKey(data, crypto_quote_mapping);
}
exports.AlpacaCryptoQuote = AlpacaCryptoQuote;
function AlpacaCryptoBar(data) {
    return aliasObjectKey(data, crypro_bar_mapping);
}
exports.AlpacaCryptoBar = AlpacaCryptoBar;
function aliasObjectKey(data, mapping) {
    return (0, mapKeys_1.default)(data, function (value, key) {
        return mapping.hasOwnProperty(key) ? mapping[key] : key;
    });
}
function AlpacaCryptoXBBO(data) {
    return aliasObjectKey(data, crypto_xbbo_mapping);
}
exports.AlpacaCryptoXBBO = AlpacaCryptoXBBO;
function convertSnapshotData(key, data) {
    switch (key) {
        case "LatestTrade":
            return AlpacaTradeV2(data);
        case "LatestQuote":
            return AlpacaQuoteV2(data);
        case "MinuteBar":
        case "DailyBar":
        case "PrevDailyBar":
            return AlpacaBarV2(data);
        default:
            return data;
    }
}
