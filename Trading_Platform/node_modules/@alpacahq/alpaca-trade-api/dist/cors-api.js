"use strict";
var AlpacaCORS = /** @class */ (function () {
    function AlpacaCORS(config) {
        this.keyId = config.keyId;
        this.secretKey = config.secretKey;
        this.baseUrl = config.baseUrl || "https://paper-api.alpaca.markets";
    }
    // Helper functions
    AlpacaCORS.prototype.httpRequest = function (method, args, body) {
        if (body === void 0) { body = undefined; }
        return fetch("https://cors-anywhere.herokuapp.com/" + this.baseUrl + "/v2/" + args, {
            method: method,
            mode: 'cors',
            headers: {
                "APCA-API-KEY-ID": this.keyId,
                "APCA-API-SECRET-KEY": this.secretKey
            },
            body: body,
        });
    };
    AlpacaCORS.prototype.dataHttpRequest = function (method, args, body) {
        if (body === void 0) { body = undefined; }
        return fetch("https://cors-anywhere.herokuapp.com/https://data.alpaca.markets/v1/" + args, {
            method: method,
            mode: 'cors',
            headers: {
                "APCA-API-KEY-ID": this.keyId,
                "APCA-API-SECRET-KEY": this.secretKey,
            },
            body: body
        });
    };
    AlpacaCORS.prototype.argsFormatter = function (type, path, query) {
        var str = type;
        if (path) {
            path.forEach(function (element) {
                str += ("/" + element);
            });
        }
        if (query) {
            if (type) {
                str += "?";
            }
            str += Object.keys(query).map(function (element) { return encodeURIComponent(element) + "=" + encodeURIComponent(query[element]); }).join("&");
        }
        return str;
    };
    // Account methods
    AlpacaCORS.prototype.getAccount = function () {
        return this.httpRequest("GET", this.argsFormatter("account", undefined, undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Order methods
    AlpacaCORS.prototype.createOrder = function (body) {
        return this.httpRequest("POST", this.argsFormatter("orders", undefined, undefined), JSON.stringify(body)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.getOrders = function (query) {
        if (query === void 0) { query = undefined; }
        return this.httpRequest("GET", this.argsFormatter("orders", undefined, query)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.getOrder = function (path) {
        return this.httpRequest("GET", this.argsFormatter("orders", [path], undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.getOrderByClientId = function (query) {
        return this.httpRequest("GET", this.argsFormatter("orders:by_client_order_id", undefined, query)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.cancelOrder = function (path) {
        return this.httpRequest("DELETE", this.argsFormatter("orders", [path], undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Position methods
    AlpacaCORS.prototype.getPosition = function (path) {
        return this.httpRequest("GET", this.argsFormatter("positions", [path], undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.getPositions = function () {
        return this.httpRequest("GET", this.argsFormatter("positions", undefined, undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Asset methods
    AlpacaCORS.prototype.getAssets = function (query) {
        if (query === void 0) { query = undefined; }
        return this.httpRequest("GET", this.argsFormatter("assets", undefined, query)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    AlpacaCORS.prototype.getAsset = function (path) {
        return this.httpRequest("GET", this.argsFormatter("assets", [path], undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Calendar methods
    AlpacaCORS.prototype.getCalendar = function (query) {
        if (query === void 0) { query = undefined; }
        return this.httpRequest("GET", this.argsFormatter("calendar", undefined, query)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Clock methods
    AlpacaCORS.prototype.getClock = function () {
        return this.httpRequest("GET", this.argsFormatter("clock", undefined, undefined)).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    // Bars methods
    AlpacaCORS.prototype.getBars = function (path, query1, query2) {
        if (query2 === void 0) { query2 = undefined; }
        var query = typeof query1 === "string" ? query1 : query1.join(',');
        return this.dataHttpRequest("GET", this.argsFormatter("bars", [path], Object.assign({ symbols: query }, query2))).then(function (resp) {
            return resp.json();
        }).then(function (resp) {
            return resp;
        }).catch(function (err) {
            return err;
        });
    };
    return AlpacaCORS;
}());
