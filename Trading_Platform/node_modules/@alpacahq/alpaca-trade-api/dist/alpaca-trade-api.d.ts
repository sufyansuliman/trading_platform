export = Alpaca;
declare function Alpaca(config?: {}): void;
declare class Alpaca {
    constructor(config?: {});
    configuration: {
        baseUrl: any;
        dataBaseUrl: any;
        dataStreamUrl: any;
        polygonBaseUrl: any;
        keyId: any;
        secretKey: any;
        apiVersion: any;
        oauth: any;
        usePolygon: boolean;
        feed: any;
        verbose: any;
        exchanges: any;
    };
    data_ws: websockets.AlpacaStreamClient;
    trade_ws: websockets.AlpacaStreamClient;
    data_stream_v2: websockets_v2.AlpacaStocksClient;
    adjustment: typeof dataV2.Adjustment;
    crypto_stream_v2: crypto_websocket.AlpacaCryptoClient;
    httpRequest: typeof api.httpRequest;
    dataHttpRequest: typeof api.dataHttpRequest;
    polygonHttpRequest: typeof api.polygonHttpRequest;
    getAccount: typeof account.get;
    updateAccountConfigurations: typeof account.updateConfigs;
    getAccountConfigurations: typeof account.getConfigs;
    getAccountActivities: typeof account.getActivities;
    getPortfolioHistory: typeof account.getPortfolioHistory;
    getPositions: typeof position.getAll;
    getPosition: typeof position.getOne;
    closeAllPositions: typeof position.closeAll;
    closePosition: typeof position.closeOne;
    getCalendar: typeof calendar.get;
    getClock: typeof clock.get;
    getAssets: typeof asset.getAll;
    getAsset: typeof asset.getOne;
    getOrders: typeof order.getAll;
    getOrder: typeof order.getOne;
    getOrderByClientId: typeof order.getByClientOrderId;
    createOrder: typeof order.post;
    replaceOrder: typeof order.patchOrder;
    cancelOrder: typeof order.cancel;
    cancelAllOrders: typeof order.cancelAll;
    getAggregates: (symbol: any, timespan: any, from: any, to: any) => any;
    getBars: (timeframe: any, symbols: any, options?: {}) => any;
    lastTrade: (symbol: any) => any;
    lastQuote: (symbol: any) => any;
    getTradesV2(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlpacaTrade, void, unknown>;
    getMultiTradesV2(symbols: any, options: any, config?: any): Promise<Map<string, any[]>>;
    getMultiTradesAsyncV2(symbols: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlpacaTrade, void, unknown>;
    getQuotesV2(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlapacaQuote, void, unknown>;
    getMultiQuotesV2(symbols: any, options: any, config?: any): Promise<Map<string, any[]>>;
    getMultiQuotesAsyncV2(symbols: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlapacaQuote, void, unknown>;
    getBarsV2(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlpacaBar, void, unknown>;
    getMultiBarsV2(symbols: any, options: any, config?: any): Promise<Map<string, any[]>>;
    getMultiBarsAsyncV2(symbols: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").AlpacaBar, void, unknown>;
    getLatestTrade(symbol: any, config?: any): Promise<import("./resources/datav2/entityv2").AlpacaTrade>;
    getLatestTrades(symbols: any, config?: any): Promise<Map<string, import("./resources/datav2/entityv2").AlpacaTrade>>;
    getLatestQuote(symbol: any, config?: any): Promise<import("./resources/datav2/entityv2").AlapacaQuote>;
    getLatestQuotes(symbols: any, config?: any): Promise<Map<string, import("./resources/datav2/entityv2").AlapacaQuote>>;
    getLatestBar(symbol: any, config?: any): Promise<import("./resources/datav2/entityv2").AlpacaBar>;
    getLatestBars(symbols: any, config?: any): Promise<Map<string, import("./resources/datav2/entityv2").AlpacaBar>>;
    getSnapshot(symbol: any, config?: any): Promise<import("./resources/datav2/entityv2").AlpacaSnapshot>;
    getSnapshots(symbols: any, config?: any): Promise<import("./resources/datav2/entityv2").AlpacaSnapshot[]>;
    getCryptoTrades(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").CryptoTrade, void, unknown>;
    getCryptoQuotes(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").CryptoQuote, void, unknown>;
    getCryptoBars(symbol: any, options: any, config?: any): AsyncGenerator<import("./resources/datav2/entityv2").CryptoBar, void, unknown>;
    getLatestCryptoTrade(symbol: any, options: any, config?: any): Promise<import("./resources/datav2/entityv2").CryptoTrade>;
    getLatestCryptoQuote(symbol: any, options: any, config?: any): Promise<import("./resources/datav2/entityv2").CryptoQuote>;
    getLatestCryptoXBBO(symbol: any, options: any, config?: any): Promise<import("./resources/datav2/entityv2").CryptoXBBO>;
    getWatchlists: typeof watchlist.getAll;
    getWatchlist: typeof watchlist.getOne;
    addWatchlist: typeof watchlist.addWatchlist;
    addToWatchlist: typeof watchlist.addToWatchlist;
    updateWatchlist: typeof watchlist.updateWatchlist;
    deleteWatchlist: typeof watchlist.deleteWatchlist;
    deleteFromWatchlist: typeof watchlist.deleteFromWatchlist;
    getExchanges: typeof polygon.exchanges;
    getSymbolTypeMap: typeof polygon.symbolTypeMap;
    getHistoricTradesV2: typeof polygon.historicTradesV2;
    getHistoricQuotesV2: typeof polygon.historicQuotesV2;
    getHistoricAggregatesV2: typeof polygon.historicAggregatesV2;
    getLastTrade: typeof polygon.lastTrade;
    getLastQuote: typeof polygon.lastQuote;
    getConditionMap: typeof polygon.conditionMap;
    getCompany: (symbol: any) => any;
    getDividends: (symbol: any, options?: {}) => any;
    getFinancials: (symbol: any, options?: {}) => any;
    getSplits: (symbol: any, options?: {}) => any;
    getNews: (symbol: any) => any;
    getSymbol: (symbol: any) => any;
}
import websockets = require("./resources/websockets");
import websockets_v2 = require("./resources/datav2/stock_websocket_v2");
import dataV2 = require("./resources/datav2/rest_v2");
import crypto_websocket = require("./resources/datav2/crypto_websocket_v2");
import api = require("./api");
import account = require("./resources/account");
import position = require("./resources/position");
import calendar = require("./resources/calendar");
import clock = require("./resources/clock");
import asset = require("./resources/asset");
import order = require("./resources/order");
import watchlist = require("./resources/watchlist");
import polygon = require("./resources/polygon");
